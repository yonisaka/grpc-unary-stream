// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: files/proto/note.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NoteServiceClient is the client API for NoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NoteServiceClient interface {
	FindLimit(ctx context.Context, in *LimitRequest, opts ...grpc.CallOption) (NoteService_FindLimitClient, error)
	FindById(ctx context.Context, opts ...grpc.CallOption) (NoteService_FindByIdClient, error)
}

type noteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNoteServiceClient(cc grpc.ClientConnInterface) NoteServiceClient {
	return &noteServiceClient{cc}
}

func (c *noteServiceClient) FindLimit(ctx context.Context, in *LimitRequest, opts ...grpc.CallOption) (NoteService_FindLimitClient, error) {
	stream, err := c.cc.NewStream(ctx, &NoteService_ServiceDesc.Streams[0], "/proto.NoteService/FindLimit", opts...)
	if err != nil {
		return nil, err
	}
	x := &noteServiceFindLimitClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NoteService_FindLimitClient interface {
	Recv() (*NoteResponse, error)
	grpc.ClientStream
}

type noteServiceFindLimitClient struct {
	grpc.ClientStream
}

func (x *noteServiceFindLimitClient) Recv() (*NoteResponse, error) {
	m := new(NoteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *noteServiceClient) FindById(ctx context.Context, opts ...grpc.CallOption) (NoteService_FindByIdClient, error) {
	stream, err := c.cc.NewStream(ctx, &NoteService_ServiceDesc.Streams[1], "/proto.NoteService/FindById", opts...)
	if err != nil {
		return nil, err
	}
	x := &noteServiceFindByIdClient{stream}
	return x, nil
}

type NoteService_FindByIdClient interface {
	Send(*SingleRequest) error
	Recv() (*NoteResponse, error)
	grpc.ClientStream
}

type noteServiceFindByIdClient struct {
	grpc.ClientStream
}

func (x *noteServiceFindByIdClient) Send(m *SingleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *noteServiceFindByIdClient) Recv() (*NoteResponse, error) {
	m := new(NoteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NoteServiceServer is the server API for NoteService service.
// All implementations must embed UnimplementedNoteServiceServer
// for forward compatibility
type NoteServiceServer interface {
	FindLimit(*LimitRequest, NoteService_FindLimitServer) error
	FindById(NoteService_FindByIdServer) error
	mustEmbedUnimplementedNoteServiceServer()
}

// UnimplementedNoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNoteServiceServer struct {
}

func (UnimplementedNoteServiceServer) FindLimit(*LimitRequest, NoteService_FindLimitServer) error {
	return status.Errorf(codes.Unimplemented, "method FindLimit not implemented")
}
func (UnimplementedNoteServiceServer) FindById(NoteService_FindByIdServer) error {
	return status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedNoteServiceServer) mustEmbedUnimplementedNoteServiceServer() {}

// UnsafeNoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NoteServiceServer will
// result in compilation errors.
type UnsafeNoteServiceServer interface {
	mustEmbedUnimplementedNoteServiceServer()
}

func RegisterNoteServiceServer(s grpc.ServiceRegistrar, srv NoteServiceServer) {
	s.RegisterService(&NoteService_ServiceDesc, srv)
}

func _NoteService_FindLimit_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LimitRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NoteServiceServer).FindLimit(m, &noteServiceFindLimitServer{stream})
}

type NoteService_FindLimitServer interface {
	Send(*NoteResponse) error
	grpc.ServerStream
}

type noteServiceFindLimitServer struct {
	grpc.ServerStream
}

func (x *noteServiceFindLimitServer) Send(m *NoteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NoteService_FindById_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NoteServiceServer).FindById(&noteServiceFindByIdServer{stream})
}

type NoteService_FindByIdServer interface {
	Send(*NoteResponse) error
	Recv() (*SingleRequest, error)
	grpc.ServerStream
}

type noteServiceFindByIdServer struct {
	grpc.ServerStream
}

func (x *noteServiceFindByIdServer) Send(m *NoteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *noteServiceFindByIdServer) Recv() (*SingleRequest, error) {
	m := new(SingleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// NoteService_ServiceDesc is the grpc.ServiceDesc for NoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.NoteService",
	HandlerType: (*NoteServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindLimit",
			Handler:       _NoteService_FindLimit_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FindById",
			Handler:       _NoteService_FindById_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "files/proto/note.proto",
}
